import { BrowserWindow, ipcMain } from 'electron'
import { OverlayConfig } from '../models/OverlayConfig'
import { OverlayWindow } from '../models/OverlayWindow'
import { getCoord } from '../utils/utils'
import { BrowserDetail } from '../models/BrowserDetail'
import { appConfig } from './index'

export const windows: OverlayWindow[] = []

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

export const createMainWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 400,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            nodeIntegrationInWorker: true,
            zoomFactor: 1, // set the zoom factor to 100%
        },
    })

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then((res) => {
        mainWindow.webContents.executeJavaScript(`
        window.myOverlayGuid = '11111-11111-11111-11111';
    `)
    })

    // Close other windows is main closes
    mainWindow.on('closed', () => {
        console.log('Main window closed')
        BrowserWindow.getAllWindows().forEach((win) => {
            win.close()
        })
    })

    // Open the DevTools.
    // mainWindow.webContents.openDevTools();
}
export const createOverlayWindow = (config: OverlayConfig): void => {
    console.log('CONFIG', config)

    const exists = windows.some(
        (window: OverlayWindow) => window.config.guid === config.guid
    )

    if (exists) {
        // Remove and recreate

        console.log('Found window with same overlay GUID!')

        const existingWindows = windows.filter(
            (window: OverlayWindow) => window.config.guid === config.guid
        )

        existingWindows.forEach((window: OverlayWindow) => {
            BrowserWindow.getAllWindows().forEach(function (win) {
                //TODO: Stay window culling, have it look for any windows that it doesent know what they are and just close them

                console.log(
                    'Found existing',
                    win.webContents.getProcessId(),
                    window.browser.processId
                )
                if (
                    win.webContents.getProcessId() == window.browser.processId
                ) {
                    console.log(
                        'Found existing',
                        win.id,
                        window.browser.processId
                    )
                    win.close()
                }
            })
        })
    }

    const size = getCoord(config.size)
    const position = getCoord(config.position)

    const frame = !config.locked

    const pos = {
        x: position[0],
        y: position[1],
    }

    const s = {
        h: size[1],
        w: size[0],
    }

    if (frame) {
        pos.y = pos.y - 37 // TODO: Check This may differ per os, maybe I need to calculate it
        pos.x = pos.x + 1

        //frame?
        // s.h = s.h + 20;
    }

    // TODO: test if I need to move the position when i remove the ui elements
    const browser: BrowserWindow = new BrowserWindow({
        height: s.h,
        width: s.w,
        x: pos.x,
        y: pos.y,
        alwaysOnTop: !config.hidden,
        transparent: true,
        skipTaskbar: true,
        autoHideMenuBar: true,
        frame,
        focusable: !config.locked, // makes it not show up in the window manager
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            zoomFactor: 1, // set the zoom factor to 100%
        },
    })

    // browser.webContents.openDevTools();

    // TODO: also figure out the ACT Overlay plugin events to set this in the page.
    if (config.locked) browser.setIgnoreMouseEvents(true)

    //TODO: error handing for failed to load url... in front end
    browser.loadURL(config.url).then((res) => {
        browser.webContents.executeJavaScript(`
        window.myOverlayGuid = '${config.guid}';

      const unlockEvent = new CustomEvent("onOverlayStateUpdate", { detail: { isLocked: ${config.locked} } });
      window.document.dispatchEvent(unlockEvent)

    `)
    })

    const browserDetails: BrowserDetail = {
        OSProcessId: browser.webContents.getOSProcessId(),
        guid: config.guid,
        processId: browser.webContents.getProcessId(),
        bounds: browser.getBounds(),
        contentBounds: browser.getContentBounds(),
        title: browser.getTitle(),
        url: browser.webContents.getURL(),
    }

    const window: OverlayWindow = {
        config,
        browser: browserDetails,
    }

    windows.push(window)
}

ipcMain.on('cleanup-windows', async () => {
    const windows = BrowserWindow.getAllWindows()
    const mainWindowGuid = '11111-11111-11111-11111'

    for (const win of windows) {
        const guid = await findGuid(win)
        const index = appConfig.overlays.findIndex(
            (overlay) => overlay.guid === guid
        )

        if (index === -1 && guid !== mainWindowGuid) win.close()

        // Close without a guid that can be used
    }
})

ipcMain.on('close-all-windows', async () => {
    const windows = BrowserWindow.getAllWindows()
    for (const win of windows) {
        win.close()
    }
})

ipcMain.on('get-window-details', async (event, guid) => {
    const windows = BrowserWindow.getAllWindows()

    for (const win of windows) {
        const winGuid = await findGuid(win)

        if (winGuid === guid) {
            event.sender.send('window-details', getWinDetails(win, guid))
        }
        // Close without a guid that can be used
    }
})

export const getWinDetails = async (
    win: BrowserWindow,
    guid: string = null
): Promise<BrowserDetail> => {
    guid = guid || (await findGuid(win))

    const detail: BrowserDetail = {
        OSProcessId: win.webContents.getOSProcessId(),
        processId: win.webContents.getProcessId(),
        guid,
        bounds: win.getBounds(),
        contentBounds: win.getContentBounds(),
        url: win.webContents.getURL(),
        title: win.webContents.getTitle(),
    }

    console.log('Detail returned: ' + detail)
    return detail
}

export const findGuid = async (win: Electron.BrowserWindow, timeout = 250) => {
    const timeoutPromise = new Promise((resolve, reject) => {
        setTimeout(
            () => reject(new Error(`Timeout after ${timeout} ms`)),
            timeout
        )
    })

    const guidPromise = win.webContents.executeJavaScript(`
      var guid = (window && window.myOverlayGuid) ? window.myOverlayGuid : undefined;
      guid;
  `)

    return Promise.race([timeoutPromise, guidPromise])
}
